/***************************************************************/
/*                                                             */
/*      PROJECT NAME :  umouse_scfkuwaganon                    */
/*      FILE         :  umouse_scfkuwaganon.cpp                */
/*      DESCRIPTION  :  Main Program                           */
/*                                                             */
/*      This file was generated by e2 studio.                  */
/*                                                             */
/***************************************************************/

#include <iodefine.h>
#include <stdio.h>
#include <stdarg.h>

// HardwareAbstractionLayer
#include "hal_clock.h"
#include "hal_gpio.h"
#include "hal_timer.h"
#include "hal_uart.h"
#include "hal_ad.h"
#include "hal_da.h"
#include "hal_flashRom.h"
#include "hal_phaseCounting.h"
#include "hal_pwm.h"
#include "hal_spi.h"
#include "hal_timerInterrupt.h"
#include "hal_wdt.h"



// Module
#include "parameterManager.h"
#include "ledController.h"
#include "wallSensor.h"
#include "batteryVoltageMonitor.h"
#include "suction.h"
#include "shell.h"

// Activity
#include "ActivityFactory.h"

// Message
#include "wallSensorMsg.h"
#include "batteryVoltageMsg.h"
#include "msgBroker.h"







// プロトタイプ宣言
void halInit();
void startUpInit();
void object_init();


extern "C" void timerInterrupt0();
extern "C" void timerInterrupt1();

void timerInterrupt0() {
    //__builtin_rx_setpsw('I'); 多重割り込み受付

    static uint64_t int_tick_count = 0;
    uint32_t start_usec = hal::getElapsedUsec();

    
    module::BatteryVoltageMonitor::getInstance().cycle0();
    module::Shell::getInstance().cycle0();

    //スロット0
    if (int_tick_count % 4 == 0) {
        module::LedController::getInstance().cycle0();
        module::WallSensor::getInstance().cycle0();

        uint32_t end_usec = hal::getElapsedUsec();
        hal::setSlot0Time(end_usec - start_usec);
    }
    //スロット1
    if (int_tick_count % 4 == 1) {
        
        uint32_t end_usec = hal::getElapsedUsec();
        hal::setSlot1Time(end_usec - start_usec);
    }
    //スロット2
    if (int_tick_count % 4 == 2) {
        module::WallSensor::getInstance().cycle1();

        uint32_t end_usec = hal::getElapsedUsec();
        hal::setSlot2Time(end_usec - start_usec);

    }
    //スロット3
    if (int_tick_count % 4 == 3) {        
        
        uint32_t end_usec = hal::getElapsedUsec();
        hal::setSlot3Time(end_usec - start_usec);
    }

    
    int_tick_count++;
}

void timerInterrupt1() {

}

int main(void) {
    halInit();
    startUpInit();
    module::LedController::getInstance().flashFcled(1,0,0,0.5,0.5);
/*        
    module::Suction::getInstance().setDuty(0.0f);
    hal::waitmsec(2000);
    module::Suction::getInstance().setDuty(0.1f);
    hal::waitmsec(2000);
    module::Suction::getInstance().setDuty(0.2f);
    hal::waitmsec(2000);
    module::Suction::getInstance().setDuty(0.3f);
    hal::waitmsec(2000);
    hal::setDutyPWM4(0.0f);
    hal::waitmsec(2000);
*/



    while(1) {                
        WallSensorMsg _ws_msg;
        BatteryVoltageMsg _vol_msg;
        copyMsg(msg_id::WALL_SENSOR, &_ws_msg);
        copyMsg(msg_id::BATTERY_VOLTAGE, &_vol_msg);
        
        int16_t a = _ws_msg.ahead_l;
        int16_t b = _ws_msg.left;
        int16_t c = _ws_msg.right;
        int16_t d = _ws_msg.ahead_r;        
        PRINTF_SYNC("%d, %d, %d, %d, %f, %f\n",a,b,c,d,_vol_msg.voltage, _vol_msg.voltage_ave);
        module::WallSensor::getInstance().debug();

        
        hal::useCS0SPI0();
        hal::setEnableSPI0(1);
        uint8_t sendBuf[4];
        uint8_t recvBuf[4];

        const uint16_t READ_FLAG = 0x80;
        uint16_t adress = 0x0F;
        sendBuf[0] = READ_FLAG | adress;
        sendBuf[1] = 0x00;
        hal::communicateNbyteSPI0(sendBuf, recvBuf, 2);
        PRINTF_SYNC("who am i : %x %x \n", recvBuf[0],recvBuf[1]);
        hal::waitmsec(10);


        hal::useCS0SPI1();
        PRINTF_SYNC("ang : %x\n", hal::communicate16bitSPI1(0b00000000));
        hal::useCS0SPI1();
        PRINTF_SYNC("ang : %x\n", hal::communicate16bitSPI1(0b00000000));
        hal::useCS0SPI1();
        PRINTF_SYNC("ang : %x\n", hal::communicate16bitSPI1(0b01011011));
        hal::useCS0SPI1();
        PRINTF_SYNC("ang : %x\n", hal::communicate16bitSPI1(0b00000000));

        hal::waitmsec(10);

        hal::useCS1SPI1();                
        PRINTF_SYNC("ang : %x\n", hal::communicate16bitSPI1(0b00000001));
        hal::useCS1SPI1();
        PRINTF_SYNC("ang : %x\n", hal::communicate16bitSPI1(0b00000011));
        hal::useCS1SPI1();
        PRINTF_SYNC("ang : %x\n", hal::communicate16bitSPI1(0b01011011));
        hal::useCS1SPI1();
        PRINTF_SYNC("ang : %x\n", hal::communicate16bitSPI1(0b00000000));


        hal::waitmsec(500);

        //module::LedController::getInstance().turnFcled(0,0,0);
        //auto activity = activity::ActivityFactory::cteateModeSelect();
        //activity->start();
    }
    return 0;
}


//各ペリフェラルの初期化
void halInit() {
    hal::initClock();
    hal::initGpio();

    hal::initTimer();
    hal::initUart0();
    hal::initUart1();
    hal::initAD();
    //hal::initDA();
    //hal::initFlashRom();
    //hal::initPhaseCounting0();
    //hal::initPhaseCounting1();
    //hal::initPWM0();
    //hal::initPWM1();
    //hal::initPWM2();
    //hal::initPWM3();
    hal::initPWM4();
    hal::initSPI0();
    hal::initSPI1();
    hal::initTimerInterrupt0();
    //hal::initTimerInterrupt1();
    //hal::initWdt();    
}


//起動時の処理
void startUpInit() {
    object_init();
    hal::setPriorityTimerInterrupt0(15);
    hal::startTimerInterrupt0();
}

void object_init() {
    module::ParameterManager::getInstance();
    module::LedController::getInstance().setDeltaT(0.001f);
    module::WallSensor::getInstance();
    module::BatteryVoltageMonitor::getInstance().setDeltaT(0.00025f);
    module::Suction::getInstance().setDeltaT(0.00025f);
    module::Shell::getInstance();
}


